{"task_id": "MBPP/task1/sample0", "completion": "```python\ndef minCost(cost, m, n): \n    dp = [[0 for x in range(m+1)] for x in range(n+1)]\n \n    dp[0][0] = cost[0][0]\n \n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n \n    return dp[m][n]\n```"}
{"task_id": "MBPP/task1/sample1", "completion": "```python\ndef min_cost(cost, m, n):\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    return dp[m][n]\n```"}
{"task_id": "MBPP/task1/sample2", "completion": "```python\ndef min_cost_path(cost, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, m+1):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n+1):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m][n]\n```"}
{"task_id": "MBPP/task2/sample0", "completion": "def find_similar_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "MBPP/task2/sample1", "completion": "def find_similar_elements(list1, list2):\n    return [item for item in list1 if item in list2]"}
{"task_id": "MBPP/task2/sample2", "completion": "def find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))"}
{"task_id": "MBPP/task3/sample0", "completion": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "MBPP/task3/sample1", "completion": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"}
{"task_id": "MBPP/task3/sample2", "completion": "```python\ndef check_non_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"}
{"task_id": "MBPP/task4/sample0", "completion": "```python\nimport heapq\n\ndef find_largest_numbers(lst, n):\n    heapq.heapify(lst)\n    return heapq.nlargest(n, lst)\n```"}
{"task_id": "MBPP/task4/sample1", "completion": "import heapq\n\ndef largest_numbers(numbers, n):\n    return heapq.nlargest(n, numbers)"}
{"task_id": "MBPP/task4/sample2", "completion": "import heapq\n\ndef find_largest(nums, k):\n    return heapq.nlargest(k, nums)"}
{"task_id": "MBPP/task5/sample0", "completion": "Here is a Python code that uses Dynamic Programming (DP) to solve the problem:\n\n```python\ndef countWays(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n\n    return A[n]\n```"}
{"task_id": "MBPP/task5/sample1", "completion": "def countWays(n):\n    A = [0 for _ in range(n + 1)] \n    B = [0 for _ in range(n + 1)]   \n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n+1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]"}
{"task_id": "MBPP/task5/sample2", "completion": "def count_ways(n):\n    a = [0] * (n+1)\n    b = [0] * (n+1)\n    a[0] = 1\n    a[1] = 0\n    b[0] = 0\n    b[1] = 1\n    for i in range(2, n+1):\n        a[i] = a[i-2] + 2*b[i-1]\n        b[i] = a[i-1] + b[i-2]\n    return a[n]"}
